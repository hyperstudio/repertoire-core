CODE IN DEVELOPMENT!  DO NOT USE WITHOUT PERMISSION.


NOTES for setting up git.

- copy .gitignore from an existing project into the new repository.  this will avoid checking build artifacts and logs into the code repository

NOTES for deployment documentation.

- on production server: 
  * main database is hyperstudio
  * access to various schemas is controlled by user logging in
  * login name should be same as project name (e.g. website)
  * schemas should be same as project abbreviation

NOTES for project development.

--- DATABASE PRIMING.
- create a new postgresql user and schema for project.  in this example, we'll create a schema for berliner sehen, which uses
- the repertoire core schemas.
CREATE USER ber;
ALTER USER cfrp ENCRYPTED PASSWORD 'cfrp_password';             -- change password accordingly; note it will be included in application
CREATE SCHEMA ber AUTHORIZATION ber;
GRANT USAGE ON SCHEMA core TO ber;
ALTER USER ber SET search_path TO ber,core,public,pg_catalog;


NOTES for repertoire core documentation.

- rake repertoire_core:migrate task does User.auto_migrate!
  * intended for initial install of framework
- hostname should be set with merb -hfoohost
  * port not available
- because roles are hierarchical, anyone with grant_foo s.t. foo > bar can grant bar
	* however, only direct grant_foo members are emailed to review on subscription requests
- to add your own project-specific roles:
  * put the create / replace code in lib/tasks/foo.rake, e.g. in berlinersehen:install rake task
  * make all your roles use a project specific prefix (e.g. 'ber')


NOTES for module development.

- follow the directions on database priming above.
- styling guide for code documentation (YARD)
- code submission should update YARD documentation
- to do live tests of assets like stylesheets and javascript, put a soft link in the shell application's public/slice
  directory, to public/* in the module code
- use a containing namespace div for all module css:
      <body id="repertoire_core">...   /* use the module name as the namespace */
    and make all enclosed css dependent on it:
      #repertoire_core .banner
  this will mean fewer css clashes between modules


NOTES for css development.

- styling guide practices for web code [ i.e. camelcase or underlines for CSS ]




Instructions for installation:

file: config/init.rb

# add the slice as a regular dependency

dependency 'repertoire_core'

# if needed, configure which slices to load and in which order

Merb::Plugins.config[:merb_slices] = { :queue => ["RepertoireCore", ...] }

# optionally configure the plugins in a before_app_loads callback

Merb::BootLoader.before_app_loads do
  
  Merb::Slices::config[:repertoire_core][:option] = value
  
end

file: config/router.rb

# example: /repertoire_core/:controller/:action/:id

r.add_slice(:RepertoireCore)

# example: /foo/:controller/:action/:id

r.add_slice(:RepertoireCore, 'foo') # same as :path => 'foo'

# example: /:lang/:controller/:action/:id (with :a param set)

r.add_slice(:RepertoireCore, :path => ':lang', :params => { :a => 'b' })

# example: /:controller/:action/:id

r.slice(:RepertoireCore)

Normally you should also run the following rake task:

rake slices:repertoire_core:install

See the slices documentation for more information.